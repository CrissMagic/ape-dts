appenders:
  stdout:
    kind: console

  default_appender:
    kind: rolling_file
    append: true
    path: "LOG_DIR_PLACEHOLDER/default.log"
    encoder:
      pattern: "{d(%Y-%m-%d %H:%M:%S.%6f)(utc)} - {level} - [{i}] - {m}{n}"
    policy:
      kind: compound
      trigger:
        kind: size
        limit: 100mb
      roller:
        kind: fixed_window
        base: 1
        count: 10
        pattern: "LOG_DIR_PLACEHOLDER/default{}.log"

  commit_appender:
    kind: rolling_file
    append: true
    path: "LOG_DIR_PLACEHOLDER/commit.log"
    encoder:
      pattern: "{d(%Y-%m-%d %H:%M:%S.%6f)(utc)} - {level} - [{i}] - {m}{n}"
    policy:
      kind: compound
      trigger:
        kind: size
        limit: 100mb
      roller:
        kind: fixed_window
        base: 1
        count: 10
        pattern: "LOG_DIR_PLACEHOLDER/commit{}.log"

  position_appender:
    kind: rolling_file
    append: true
    path: "LOG_DIR_PLACEHOLDER/position.log"
    encoder:
      pattern: "{d(%Y-%m-%d %H:%M:%S.%6f)(utc)} | {m}{n}"
    policy:
      kind: compound
      trigger:
        kind: size
        limit: 1mb
      roller:
        kind: fixed_window
        base: 1
        count: 10
        pattern: "LOG_DIR_PLACEHOLDER/position{}.log"

  monitor_appender:
    kind: rolling_file
    append: true
    path: "LOG_DIR_PLACEHOLDER/monitor.log"
    encoder:
      pattern: "{d(%Y-%m-%d %H:%M:%S.%6f)(utc)} | {m}{n}"
    policy:
      kind: compound
      trigger:
        kind: size
        limit: 100mb
      roller:
        kind: fixed_window
        base: 1
        count: 10
        pattern: "LOG_DIR_PLACEHOLDER/monitor{}.log"

  miss_appender:
    kind: rolling_file
    append: true
    path: "CHECK_LOG_DIR_PLACEHOLDER/miss.log"
    encoder:
      pattern: "{m}{n}"
    policy:
      kind: compound
      trigger:
        kind: size
        limit: 100mb
      roller:
        kind: fixed_window
        base: 1
        count: 10
        pattern: "CHECK_LOG_DIR_PLACEHOLDER/miss{}.log"

  diff_appender:
    kind: rolling_file
    append: true
    path: "CHECK_LOG_DIR_PLACEHOLDER/diff.log"
    encoder:
      pattern: "{m}{n}"
    policy:
      kind: compound
      trigger:
        kind: size
        limit: 100mb
      roller:
        kind: fixed_window
        base: 1
        count: 10
        pattern: "CHECK_LOG_DIR_PLACEHOLDER/diff{}.log"

  extra_appender:
    kind: rolling_file
    append: true
    path: "CHECK_LOG_DIR_PLACEHOLDER/extra.log"
    encoder:
      pattern: "{m}{n}"
    policy:
      kind: compound
      trigger:
        kind: size
        limit: 100mb
      roller:
        kind: fixed_window
        base: 1
        count: 10
        pattern: "CHECK_LOG_DIR_PLACEHOLDER/extra{}.log"

  statistic_appender:
    kind: rolling_file
    append: true
    path: "STATISTIC_LOG_DIR_PLACEHOLDER/statistic.log"
    encoder:
      pattern: "{m}{n}"
    policy:
      kind: compound
      trigger:
        kind: size
        limit: 100mb
      roller:
        kind: fixed_window
        base: 1
        count: 10
        pattern: "STATISTIC_LOG_DIR_PLACEHOLDER/statistic{}.log"

  finished_appender:
    kind: rolling_file
    append: true
    path: "LOG_DIR_PLACEHOLDER/finished.log"
    encoder:
      pattern: "{d(%Y-%m-%d %H:%M:%S.%6f)(utc)} | {m}{n}"
    policy:
      kind: compound
      trigger:
        kind: size
        limit: 100mb
      roller:
        kind: fixed_window
        base: 1
        count: 10
        pattern: "LOG_DIR_PLACEHOLDER/finished{}.log"
  
  sql_appender:
    kind: rolling_file
    append: true
    path: "LOG_DIR_PLACEHOLDER/sql.log"
    encoder:
      pattern: "{m}{n}"
    policy:
      kind: compound
      trigger:
        kind: size
        limit: 100mb
      roller:
        kind: fixed_window
        base: 1
        count: 10
        pattern: "LOG_DIR_PLACEHOLDER/sql{}.log"

  task_appender:
    kind: rolling_file
    append: true
    path: "LOG_DIR_PLACEHOLDER/task.log"
    encoder:
      pattern: "{m}{n}"   
    policy:
      kind: compound
      trigger:
        kind: size
        limit: 100kb
      roller:
        kind: delete    

  http_appender:
    kind: rolling_file
    append: true
    path: "LOG_DIR_PLACEHOLDER/http.log"
    encoder:
      pattern: "{d(%Y-%m-%d %H:%M:%S.%6f)(utc)} - {level} - [{i}] - {m}{n}"
    policy:
      kind: compound
      trigger:
        kind: size
        limit: 100mb
      roller:
        kind: fixed_window
        base: 1
        count: 10
        pattern: "LOG_DIR_PLACEHOLDER/http{}.log"

loggers:
  mysql_binlog_connector_rust:  # crate: mysql-binlog-connector-rust
    level: LOG_LEVEL_PLACEHOLDER
    appenders:
      - default_appender

  sqlx:  # crate: sqlx
    level: LOG_LEVEL_PLACEHOLDER
    appenders:
      - default_appender

  default_logger:
    level: LOG_LEVEL_PLACEHOLDER
    appenders: 
      - default_appender

  commit_logger:
    level: LOG_LEVEL_PLACEHOLDER
    appenders: 
      - commit_appender

  position_logger:
    level: LOG_LEVEL_PLACEHOLDER
    appenders: 
      - position_appender

  monitor_logger:
    level: LOG_LEVEL_PLACEHOLDER
    appenders: 
      - monitor_appender

  miss_logger: 
    level: LOG_LEVEL_PLACEHOLDER
    appenders: 
      - miss_appender

  diff_logger: 
    level: LOG_LEVEL_PLACEHOLDER
    appenders: 
      - diff_appender

  extra_logger: 
    level: LOG_LEVEL_PLACEHOLDER
    appenders: 
      - extra_appender

  statistic_logger: 
    level: LOG_LEVEL_PLACEHOLDER
    appenders: 
      - statistic_appender

  finished_logger: 
    level: LOG_LEVEL_PLACEHOLDER
    appenders: 
      - finished_appender

  sql_logger: 
    level: LOG_LEVEL_PLACEHOLDER
    appenders: 
      - sql_appender

  task_logger: 
    level: LOG_LEVEL_PLACEHOLDER
    appenders: 
      - task_appender
    additive: false  

  http_logger:
    level: info
    appenders:
      - http_appender
    additive: false

  actix_web:
    level: info
    appenders:
      - http_appender
      - stdout
    additive: false
      
  actix_server:
    level: info  
    appenders:
      - http_appender
      - stdout
    additive: false  

root:
  level: LOG_LEVEL_PLACEHOLDER
  appenders:
    - stdout